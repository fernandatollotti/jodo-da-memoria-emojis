// Array contendo pares de emojis para o jogo da mem√≥ria
const emojis = ["ü¶Ä","ü¶Ä","ü¶Ü","ü¶Ü","ü¶ú","ü¶ú","ü¶©","ü¶©","ü¶â","ü¶â","üêß","üêß","ü¶ã","ü¶ã","üêû","üêû"];
// Array que armazenar√° as cartas abertas (selecionadas pelo jogador)
let openCards = [];

// Embaralha os emojis aleatoriamente para exibir uma nova ordem a cada jogo
let randomEmojis = emojis.sort(() => (Math.random() > 0.5) ? 2 : -1);

// Loop que cria os elementos de cada carta do jogo
for (let i = 0; i < emojis.length; i++) {
  let box = document.createElement('div'); // Cria um elemento <div> para cada carta
  box.className = 'item'; // Define a classe para estiliza√ß√£o
  box.innerHTML = randomEmojis[i]; // Insere um emoji aleat√≥rio na carta
  box.onclick = handleClick; // Associa o evento de clique √† fun√ß√£o de manipula√ß√£o
  document.querySelector('.game').appendChild(box); // Adiciona a carta ao container do jogo
}

// Fun√ß√£o chamada quando uma carta √© clicada
function handleClick() {
  // Verifica se h√° menos de duas cartas abertas
  if (openCards.length < 2) {
    this.classList.add('boxOpen'); // Adiciona a classe para mostrar a carta
    openCards.push(this); // Adiciona a carta ao array de cartas abertas
  }

  // Se duas cartas est√£o abertas, verifica se s√£o iguais ap√≥s um pequeno intervalo
  if (openCards.length == 2) {
    setTimeout(checkMatch, 500);
  }
}

// Fun√ß√£o que verifica se as duas cartas abertas s√£o iguais
function checkMatch() {
  // Se as cartas combinam, adiciona uma classe de correspond√™ncia para mant√™-las abertas
  if (openCards[0].innerHTML === openCards[1].innerHTML) {
    openCards[0].classList.add('boxMatch');
    openCards[1].classList.add('boxMatch');
  } else {
    // Se as cartas n√£o combinam, remove a classe de exibi√ß√£o
    openCards[0].classList.remove('boxOpen');
    openCards[1].classList.remove('boxOpen');
  }

  // Limpa o array de cartas abertas para permitir novas sele√ß√µes
  openCards = [];
}